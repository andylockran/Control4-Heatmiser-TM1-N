<devicedata>
   <copyright>Copyright 2015 Andy Loughran.  All rights reserved.</copyright>
   <manufacturer>ZRMT</manufacturer>
   <creator>Andy Loughran</creator>
   <created>02/11/2015 20:00</created>
   <modified>02/11/2015 20:00</modified>
     <driver>DriverWorks</driver>
    <combo>true</combo>
   <name>Heatmiser-tm1</name>
   <model>TM1-N</model>
   <version>33</version>
   <proxy>zrmtheatmisertm1</proxy>
  <small>devices_sm/C4.gif</small>
  <large>devices_lg/C4.gif</large>
   <control>lua_gen</control>
   <front/><back/><top/><bottom/><left/><right/>
  <composer_categories />
  <capabilities />
  <connections>
    <connection>
      <id>1</id>
      <type>1</type>
      <connectionname>Management Link</connectionname>
      <consumer>False</consumer>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>HEATMISER_CONTROL</classname>
        </class>
      </classes>
    </connection>
  </connections>
  <config>
<script>
    <![CDATA[

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-- Driver Declarations
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
--[[
  Command Handler Tables
--]]
EX_CMD = {}
PRX_CMD = {}
NOTIFY = {}
DEV_MSG = {}
LUA_ACTION = {}

--[[
Tables of functions
The following tables are function containers that are called within the following functions:  

  OnDriverInit()
    - first calls all functions contained within ON_DRIVER_EARLY_INIT table
    - then calls all functions contained within ON_DRIVER_INIT table
  OnDriverLateInit()
    - calls all functions contained within ON_DRIVER_LATEINIT table
  OnDriverUpdate()
    - calls all functions contained within ON_DRIVER_UPDATE table
  OnDriverDestroyed()
    - calls all functions contained within ON_DRIVER_DESTROYED table
  OnPropertyChanged()
    - calls all functions contained within ON_PROPERTY_CHANGED table
--]]
ON_DRIVER_INIT = {}
ON_DRIVER_EARLY_INIT = {}
ON_DRIVER_LATEINIT = {}
ON_DRIVER_UPDATE = {}
ON_DRIVER_DESTROYED = {}
ON_PROPERTY_CHANGED = {}

-- Constants
DEFAULT_PROXY_BINDINGID = 5001
    
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-- Common Driver Code
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
--[[
  OnPropertyChanged
    Function called by Director when a property changes value.
  Parameters
    sProperty
      Name of property that has changed.
  Remarks
    The value of the property that has changed can be found with: Properties[sName]. Note
    that OnPropertyChanged is not called when the Property has been changed by the driver
    calling the UpdateProperty command, only when the Property is changed by the user from
    the Properties Page. This function is called by Director when a property changes value.
--]]
function OnPropertyChanged(sProperty)
  Dbg:Trace("OnPropertyChanged(" .. sProperty .. ") changed to: " .. Properties[sProperty])

  local propertyValue = Properties[sProperty]
  
  -- Remove any spaces (trim the property)
  local trimmedProperty = string.gsub(sProperty, " ", "")

  -- if function exists then execute (non-stripped)
  if (ON_PROPERTY_CHANGED[sProperty] ~= nil and type(ON_PROPERTY_CHANGED[sProperty]) == "function") then
    ON_PROPERTY_CHANGED[sProperty](propertyValue)
    return
  -- elseif trimmed function exists then execute
  elseif (ON_PROPERTY_CHANGED[trimmedProperty] ~= nil and type(ON_PROPERTY_CHANGED[trimmedProperty]) == "function") then
    ON_PROPERTY_CHANGED[trimmedProperty](propertyValue)
    return
  end
end

function ON_PROPERTY_CHANGED.DebugMode(propertyValue)
  gDebugTimer:KillTimer()
  Dbg:OutputPrint(propertyValue:find("Print") ~= nil)
  Dbg:OutputC4Log(propertyValue:find("Log") ~= nil)
  if (propertyValue == "Off") then return end
  gDebugTimer:StartTimer()
end

function ON_PROPERTY_CHANGED.DebugLevel(propertyValue)
  Dbg:SetLogLevel(tonumber(string.sub(propertyValue, 1, 1)))
end

---------------------------------------------------------------------
-- ExecuteCommand Code
---------------------------------------------------------------------
--[[
  ExecuteCommand
    Function called by Director when a command is received for this DriverWorks driver.
    This includes commands created in Composer programming.
  Parameters
    sCommand
      Command to be sent
    tParams
      Lua table of parameters for the sent command
--]]
function ExecuteCommand(sCommand, tParams)
  Dbg:Trace("ExecuteCommand(" .. sCommand .. ")")
  Dbg:Info(tParams)

  -- Remove any spaces (trim the command)
  local trimmedCommand = string.gsub(sCommand, " ", "")

  -- if function exists then execute (non-stripped)
  if (EX_CMD[sCommand] ~= nil and type(EX_CMD[sCommand]) == "function") then
    EX_CMD[sCommand](tParams)
  -- elseif trimmed function exists then execute
  elseif (EX_CMD[trimmedCommand] ~= nil and type(EX_CMD[trimmedCommand]) == "function") then
    EX_CMD[trimmedCommand](tParams)
  -- handle the command
  elseif (EX_CMD[sCommand] ~= nil) then
    QueueCommand(EX_CMD[sCommand])
  else
    Dbg:Alert("ExecuteCommand: Unhandled command = " .. sCommand)
  end
end

--[[
  Define any functions of commands (EX_CMD.<command>) received from ExecuteCommand that need to be handled by the driver.
--]]

--[[
  EX_CMD.LUA_ACTION
    Function called for any actions executed by the user from the Actions Tab in Composer.
--]]
function EX_CMD.LUA_ACTION(tParams)
  if tParams ~= nil then
    for cmd,cmdv in pairs(tParams) do
      if cmd == "ACTION" then
        if (LUA_ACTION[cmdv] ~= nil) then
          LUA_ACTION[cmdv]()
        else
          Dbg:Alert("Undefined Action")
          Dbg:Alert("Key: " .. cmd .. " Value: " .. cmdv)
        end
      else
        Dbg:Alert("Undefined Command")
        Dbg:Alert("Key: " .. cmd .. " Value: " .. cmdv)
      end
    end
  end
end

--[[
  LUA_ACTION.DisplayGlobals
    Implementation of Action "Display Globals". Executed when selecting the "Display Globals" action within Composer.
    Provided as an example for actions.
--]]
function LUA_ACTION.DisplayGlobals()
  print ("Global Variables")
  print ("----------------------------")

  for k,v in pairs(_G) do -- globals`
    if not (type(v) == "function") then
      --print(k .. ":  " .. tostring(v))
      if (string.find(k, "^g%L")  == 1) then
        print(k .. ":  " .. tostring(v))
        if (type(v) == "table") then
          PrintTable(v, "   ")
        end
      end
    end
  end

  print ("")
end

function PrintTable(tValue, sIndent)
  sIndent = sIndent or "   "
  for k,v in pairs(tValue) do
    print(sIndent .. tostring(k) .. ":  " .. tostring(v))
    if (type(v) == "table") then
      PrintTable(v, sIndent .. "   ")
    end
  end
end

---------------------------------------------------------------------
-- ReceivedFromProxy Code
---------------------------------------------------------------------
--[[
  ReceivedFromProxy(idBinding, sCommand, tParams)
    Function called by Director when a proxy bound to the specified binding sends a
    BindMessage to the DriverWorks driver.

  Parameters
    idBinding
      Binding ID of the proxy that sent a BindMessage to the DriverWorks driver.
    sCommand
      Command that was sent
    tParams
      Lua table of received command parameters
--]]
function ReceivedFromProxy(idBinding, sCommand, tParams)
  if (sCommand ~= nil) then
    if(tParams == nil)    -- initial table variable if nil
      then tParams = {}
    end
    Dbg:Trace("ReceivedFromProxy(): " .. sCommand .. " on binding " .. idBinding .. "; Call Function " .. sCommand .. "()")
    Dbg:Info(tParams)

    if (PRX_CMD[sCommand]) ~= nil then
      PRX_CMD[sCommand](idBinding, tParams)
    else
      Dbg:Alert("ReceivedFromProxy: Unhandled command = " .. sCommand)
    end
  end
end

---------------------------------------------------------------------
-- Notification Code
---------------------------------------------------------------------
-- notify with parameters
function SendNotify(notifyText, Parms, bindingID)
  C4:SendToProxy(bindingID, notifyText, Parms, "NOTIFY")
end

-- A notify with no parameters
function SendSimpleNotify(notifyText, ...)
  bindingID = select(1, ...) or DEFAULT_PROXY_BINDINGID
  C4:SendToProxy(bindingID, notifyText, {}, "NOTIFY")
end

---------------------------------------------------------------------
-- Initialization/Destructor Code
---------------------------------------------------------------------
--[[
  OnDriverInit
    Invoked by director when a driver is loaded. This API is provided for the driver developer to contain all of the driver
    objects that will require initialization.
--]]
function OnDriverInit()
  C4:ErrorLog("INIT_CODE: OnDriverInit()")
  -- Call all ON_DRIVER_EARLY_INIT functions.
  for k,v in pairs(ON_DRIVER_EARLY_INIT) do
    if (ON_DRIVER_EARLY_INIT[k] ~= nil and type(ON_DRIVER_EARLY_INIT[k]) == "function") then
      C4:ErrorLog("INIT_CODE: ON_DRIVER_EARLY_INIT." .. k .. "()")
      ON_DRIVER_EARLY_INIT[k]()
    end
  end

  -- Call all ON_DRIVER_INIT functions
  for k,v in pairs(ON_DRIVER_INIT) do
    if (ON_DRIVER_INIT[k] ~= nil and type(ON_DRIVER_INIT[k]) == "function") then
      C4:ErrorLog("INIT_CODE: ON_DRIVER_INIT." .. k .. "()")
      ON_DRIVER_INIT[k]()
    end
  end

  -- Fire OnPropertyChanged to set the initial Headers and other Property global sets, they'll change if Property is changed.
  for k,v in pairs(Properties) do
    OnPropertyChanged(k)
  end
end

--[[
  OnDriverUpdate
    Invoked by director when an update to a driver is requested. This request can occur either by adding a new version of a driver
    through the driver search list or right clicking on the driver and selecting "Update Driver" from within ComposerPro.
    Its purpose is to initialize all components of the driver that are reset during a driver update.
--]]
function OnDriverUpdate()
  C4:ErrorLog("INIT_CODE: OnDriverUpdate()")
  
  -- Call all ON_DRIVER_UPDATE functions
  for k,v in pairs(ON_DRIVER_UPDATE) do
    if (ON_DRIVER_UPDATE[k] ~= nil and type(ON_DRIVER_UPDATE[k]) == "function") then
      C4:ErrorLog("INIT_CODE: ON_DRIVER_UPDATE." .. k .. "()")
      ON_DRIVER_UPDATE[k]()
    end
  end
end

--[[
  OnDriverLateInit
    Invoked by director after all drivers in the project have been loaded. This API is provided
    for the driver developer to contain all of the driver objects that will require initialization
    after all drivers in the project have been loaded.
--]]
function OnDriverLateInit()
  C4:ErrorLog("INIT_CODE: OnDriverLateInit()")
  
  -- Call all ON_DRIVER_LATEINIT functions
  for k,v in pairs(ON_DRIVER_LATEINIT) do
    if (ON_DRIVER_LATEINIT[k] ~= nil and type(ON_DRIVER_LATEINIT[k]) == "function") then
      C4:ErrorLog("INIT_CODE: ON_DRIVER_LATEINIT." .. k .. "()")
      ON_DRIVER_LATEINIT[k]()
    end
  end
end


--[[
  OnDriverDestroyed
    Function called by Director when a driver is removed. Release things this driver has allocated such as timers.
--]]
function OnDriverDestroyed()
  C4:ErrorLog("INIT_CODE: OnDriverDestroyed()")
  -- Call all ON_DRIVER_DESTROYED functions
  for k,v in pairs(ON_DRIVER_DESTROYED) do
    if (ON_DRIVER_DESTROYED[k] ~= nil and type(ON_DRIVER_DESTROYED[k]) == "function") then
      C4:ErrorLog("INIT_CODE: ON_DRIVER_DESTROYED." .. k .. "()")
      ON_DRIVER_DESTROYED[k]()
    end
  end
end

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-- Debug Logging Code
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Log = {}

-- Create a Table with Logging functions
function Log:Create()
  
  -- table for logging functions
  local lt = {}
  
  lt._logLevel = 0
  lt._outputPrint = false
  lt._outputC4Log = false
  lt._logName =  "Set Log Name to display"
  
  function lt:SetLogLevel(level)
    self._logLevel = level
  end
  
  function lt:OutputPrint(value)
    self._outputPrint = value
  end
  
  function lt:OutputC4Log(value)
    self._outputC4Log = value
  end
  
  function lt:SetLogName(name)
    self._logName = name
  end

  function lt:Enabled()
    return (self._outputPrint or self._outputC4Log)
  end
  
  function lt:PrintTable(tValue, sIndent)
    if (type(tValue) == "table") then
      if (self._outputPrint) then
        for k,v in pairs(tValue) do
          print(sIndent .. tostring(k) .. ":  " .. tostring(v))
          if (type(v) == "table") then
            self:PrintTable(v, sIndent .. "   ")
          end
        end
      end
  
      if (self._outputC4Log) then
        for k,v in pairs(tValue) do
          C4:ErrorLog(self._logName .. ": " .. sIndent .. tostring(k) .. ":  " .. tostring(v))
          if (type(v) == "table") then
            self:PrintTable(v, sIndent .. "   ")
          end
        end
      end

    else
      if (self._outputPrint) then
        print (sIndent .. tValue)
      end
      
      if (self._outputC4Log) then
        C4:ErrorLog(self._logName .. ": " .. sIndent .. tValue)
      end
    end
  end
    
  function lt:Print(logLevel, sLogText)
    if (self._logLevel >= logLevel) then
      if (type(sLogText) == "table") then
        self:PrintTable(sLogText, "   ")
        return
      end
      
      if (self._outputPrint) then
        print (sLogText)
      end

      if (self._outputC4Log) then
        C4:ErrorLog(self._logName .. ": " .. sLogText)
      end
    end
  end
  
  function lt:Alert(strDebugText)
    self:Print(0, strDebugText)
  end
  
  function lt:Error(strDebugText)
    self:Print(1, strDebugText)
  end
  
  function lt:Warn(strDebugText)
    self:Print(2, strDebugText)
  end
  
  function lt:Info(strDebugText)
    self:Print(3, strDebugText)
  end
  
  function lt:Trace(strDebugText)
    self:Print(4, strDebugText)
  end
  
  function lt:Debug(strDebugText)
    self:Print(5, strDebugText)
  end
  
  return lt
end

function ON_DRIVER_EARLY_INIT.LogLib()
  -- Create and initialize debug logging
  Dbg = Log.Create()
  Dbg:SetLogName("base_template PLEASE CHANGE")
end

function ON_DRIVER_INIT.LogLib()
  -- Create Debug Timer
  gDebugTimer = Timer:Create("Debug", 45, "MINUTES", OnDebugTimerExpired)
end

--[[
  OnDebugTimerExpired
    Debug timer callback function
--]]
function OnDebugTimerExpired()
  Dbg:Warn("Turning Debug Mode Off (timer expired)")
  gDebugTimer:KillTimer()
  C4:UpdateProperty("Debug Mode", "Off")
  OnPropertyChanged("Debug Mode")
end
      
---------------------------------------------------------------------
-- Timer Code
---------------------------------------------------------------------
Timer = {}

-- Create a Table with Timer functions
function Timer:Create(name, interval, units, Callback, repeating, Info)
  -- timers table
  local tt = {}
  
  tt._name = name
  tt._timerID = TimerLibGetNextTimerID()
  tt._interval = interval
  tt._units = units
  tt._repeating = repeating or false
  tt._Callback = Callback
  tt._info = Info or ""
  tt._id = 0

  function tt:StartTimer(...)
    self:KillTimer()
    
    -- optional parameters (interval, units, repeating)
    if ... then
      local interval = select(1, ...)
      local units = select(2, ...)
      local repeating = select(3, ...)
      
      self._interval = interval or self._interval
      self._units = units or self._units
      self._repeating = repeating or self._repeating
    end
    
    if (self._interval > 0) then
      Dbg:Trace("Starting Timer: " .. self._name)
      self._id = C4:AddTimer(self._interval, self._units, self._repeating)
    end
  end

  function tt:KillTimer()
    if (self._id) then
      self._id = C4:KillTimer(self._id)
    end
  end
  
  function tt:TimerStarted()
    return (self._id ~= 0)
  end
      
  function tt:TimerStopped()
    return not self:TimerStarted()
  end
  
  gTimerLibTimers[tt._timerID] = tt
  Dbg:Trace("Created timer " .. tt._name)
  
  return tt
end

function TimerLibGetNextTimerID()
  gTimerLibTimerCurID = gTimerLibTimerCurID + 1
  return gTimerLibTimerCurID
end

function ON_DRIVER_EARLY_INIT.TimerLib()
  gTimerLibTimers = {}
  gTimerLibTimerCurID = 0
end

function ON_DRIVER_DESTROYED.TimerLib()
  -- Kill open timers
  for k,v in pairs(gTimerLibTimers) do
    v:KillTimer()
  end
end

--[[
  OnTimerExpired
    Function called by Director when the specified Control4 timer expires.
  Parameters
    idTimer
      Timer ID of expired timer.
--]]
function OnTimerExpired(idTimer)
  for k,v in pairs(gTimerLibTimers) do
    if (idTimer == v._id) then
      if (v._Callback) then
        v._Callback(v._info)
      end
    end
  end
end

--=-=-=-=-=-=-=-=-=-=-=-=-
-- Andy Constants
--=-=-=-=-=-=-=-=-=-=-=-=-

HMV2_ID = 2
HMV3_ID = 3
BYTEMASK = 0xff
DONT_CARE_LENGTH = 1
-- Master must be in range [0x81,0xa0] = [129,160]
MASTER_ADDR_MIN = 0x81
MASTER_ADDR_MAX = 0xa0
-- Define magic numbers used in messages
FUNC_READ  = 0
FUNC_WRITE = 1
BROADCAST_ADDR = 0xff
RW_LENGTH_ALL = 0xffff
HOT_WATER_ADDR_VAL = 42

HOT_WATER_ON_VAL = 01
HOT_WATER_OFF_VAL = 00

MY_MASTER_ADDR = 0x81

g_SerialData = ""

--=-=-=-=-=-=-=-=-=-=-=-=-
-- End of Andy Constants 
--=-=-=-=-=-=-=-=-=-=-=-=-

function lsh(value,shift)
    return (value*(2^shift)) % 2^24
end
function rsh(value,shift)
    return math.floor(value/2^shift) % 2^24
end
function bitand(a, b)
    local result = 0
    local bitval = 1
    while a > 0 and b > 0 do
      if a % 2 == 1 and b % 2 == 1 then -- test the rightmost bits
          result = result + bitval      -- set the current bit
      end
      bitval = bitval * 2 -- shift left
          a = math.floor(a/2) -- shift right
      b = math.floor(b/2)
    end
    return result
end
function bitor(x, y)
  local p = 1
  while p < x do p = p + p end
  while p < y do p = p + p end
  local z = 0
  repeat
    if p <= x or p <= y then
      z = z + p
      if p <= x then x = x - p end
      if p <= y then y = y - p end
    end
    p = p * 0.5
  until p < 1
  return z
end
function xor(a,b)
  local r = 0
  local f = math.floor
  for i = 0, 31 do
    local x = a / 2 + b / 2
    if x ~= f(x) then
      r = r + 2^i
    end
    a = f(a / 2)
    b = f(b / 2)
  end
  return r
end

-- Andy starts coding here 

crc16 = {}
crc16.__index = crc16

function crc16.new(LookupHigh,LookupLow,High,Low)
  local o = {}
  o.LookupHigh = { 0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x81, 0x91, 0xa1, 0xb1, 0xc1, 0xd1, 0xe1, 0xf1 }
  o.LookupLow = { 0x00, 0x21, 0x42, 0x63, 0x84, 0xa5, 0xc6, 0xe7, 0x08, 0x29, 0x4a, 0x6b, 0x8c, 0xad, 0xce, 0xef }
  o.High = 0xff
  o.Low = BYTEMASK
  setmetatable(o,crc16)
  return o
end

function crc16:Update4Bits(val)
  --Step one, extract the Most significant 4 bits of the CRC register
  --print(self.High)
  t = rsh(self.High,4)
  --print("t is: " .. t)
  
  --XOR in the Message Data into the extracted bits
  t = xor(t,val)  
  --print("t is now: " .. t)
  
  --Shift the CRC Register left 4 bits
  self.High = bitor(lsh(self.High,4),rsh(self.Low,4))
  --print(self.High)
  self.High = bitand(self.High,BYTEMASK)
  --print(self.High)
  self.Low = lsh(self.Low,4)
  --print(self.Low)
  self.Low = bitand(self.Low,BYTEMASK)
  --print(self.Low)

  --print("Low",self.Low)
  --print("High",self.High)

  --Do the table lookups and XOR the results into the CRC tables
  self.High = xor(self.High,self.LookupHigh[t+1])
  --print(self.High)
  self.High = bitand(self.High,BYTEMASK)
  --print (self.High)
  self.Low = xor(self.Low,self.LookupLow[t+1])
  --print(self.Low)
  self.Low = bitand(self.Low,BYTEMASK)
  --print(self.Low)
  
  --print("FLow:",self.Low)
  --print("FHigh:",self.High)


end

function crc16:CRC16_Update(val)
  print("Value:",val)
  print("updating 1")
  self:Update4Bits(rsh(val,4))
  print("updating 1 complete. updating 2")
  print(val)
  self:Update4Bits(bitand(val,0x0f))
  print("updating2 complete")
end

function crc16:run(message)
  -- Calculates a crc
  --print "Fuck off"
  print("at crc16:run")
  --print(string.len(message))  
  for k,value in ipairs(message) do
    --print(v)
    self:CRC16_Update(value)
    --print(self.Low)
   -- print(self.High)
  end
  table.insert(msg,self.Low)
  table.insert(msg,self.High)
  print("crc:run complete")
  return msg
end

-- Testing the functionality below:
--crc = crc16.new()
--andy = crc:run(1212121121212)
--print(andy[1],andy[2])

crc = crc16.new()


function hmFormMsg(destination,source,functioncall,start,payload)
  --print("hmFormMsg:            ",destination,source,functioncall,start,payload)
  start_low = bitand(start,BYTEMASK)
  start_high = bitand(rsh(start,8),BYTEMASK)
  payloadstring = tostring(payload)
  payloadLength = #payloadstring
  last_low = bitand(payloadLength,BYTEMASK)
  last_high = bitand(rsh(payloadLength,8),BYTEMASK)
  --print(destination,source,functioncall,start,payload)
  if functioncall == FUNC_READ then 
    print("Read")
    payloadLength = 0x00
    length_low = BMAnd(RW_LENGTH_ALL,BYTEMASK)
    length_high = BMAnd(rsh(RW_LENGTH_ALL,8),BYTEMASK)
    msg = {destination,10+payloadLength, source, functioncall, start_low, start_high, length_low, length_high}
    return msg
  end
  if functioncall == FUNC_WRITE then
    msg = {destination, 10+payloadLength, source, functioncall, start_low, start_high, last_low, last_high}
    table.insert(msg,payload)
    --print("destination:\t",msg[1],"\npayload:\t",msg[2],"\nsource:\t\t",msg[3],"\nfunction\t",msg[4],"\nsl\t\t",msg[5],"\nsh\t\t",msg[6],"\nfl\t\t",msg[7],"\nfh\t\t",msg[8])
    return msg
  end

end

function hmFormMsgCRC(destination, source, functioncall, start, payload)
  --Forms a message payload, including CRC"""
  --print("hmFormMsgCRC:         ", destination,source, functioncall, start, payload)
  data = hmFormMsg(destination, source, functioncall, start, payload)
  --print("Payload data: ", data)
  newdata = crc:run(data)
  --crc:run(data)
  return data
end

function hmVerifyMsgCRCOK(source, expectedFunction, expectedLength, datal)
  --print(datal)
  --expectedchecksum = crc:run(rxmsg)
  if expectedchecksum == checksum then
    print("CRC is correct")
  else
    print("Incorrect CRC")
  end
end

function hex_dump (str)
    local len = string.len( str )
    local dump = ""
    local hex = ""
    local asc = ""
    
    for i = 1, len do
        if 1 == i % 8 then
            dump = dump .. hex .. asc .. "\n"
            hex = string.format( "%04x: ", i - 1 )
            asc = ""
        end
        
        local ord = string.byte( str, i )
        hex = hex .. string.format( "%02x ", ord )
        if ord >= 32 and ord <= 126 then
            asc = asc .. string.char( ord )
        else
            asc = asc .. "."
        end
    end
 
    
    return dump .. hex
            .. string.rep( "   ", 8 - len % 8 ) .. asc
end

function ReceivedFromSerial(idBinding, strData)
  hex_dump(strData)
end

function hmSendMsg(message)
    Dbg:OutputPrint('hex_dump(message)')
  data2 = {}
  for k,v in ipairs(message) do
    -- Need to insert the value as a chr value
    v = string.char(v)
    table.insert(data2,v)
  end
  cmd = table.concat(data2) ..'\r'
  C4:SendToSerial(1, cmd)
  Dbg:OutputPrint('C4:SendToSerial(1, cmd')
  print "data sent to serial"
  ReceivedFromSerial(1,strData)
  Dbg:OutputPrint(ReceivedFromSerial(1,strData))
  return 1
end

function hotWaterSwitch(destination,payload)
  --print("hotWaterSwitch: ",destination,MY_MASTER_ADDR,FUNC_WRITE,HOT_WATER_ADDR_VAL,payload)
  msg = hmFormMsgCRC(destination,MY_MASTER_ADDR,FUNC_WRITE,HOT_WATER_ADDR_VAL,payload)
  hmSendMsg(msg)
end

function LUA_ACTION.hotWaterOnPlease()
  Dbg:OutputPrint("Hot water turning on")
  hotWaterSwitch(Properties['ThermostatID'],HOT_WATER_ON_VAL)
end

function LUA_ACTION.hotWaterTimedPlease()
  Dbg:OutputPrint("Hot water timed mode")
  hotWaterSwitch(Properties['ThermostatID'],HOT_WATER_AUTO_VAL)
end

--print(hotWaterSwitch("5,HOT_WATER_ON_VAL))
  
  ]]>
      </script>
      <actions>
        <action>
          <name>Hot Water On</name>
          <command>hotWaterOnPlease</command>
        </action>
        <action>
          <name>Hot Water Timed</name>
          <command>hotWaterTimedPlease</command>
        </action>
        <action>
          <name>Display Globals</name>
          <command>DisplayGlobals</command>
        </action>
      </actions>
      <commands>
        <command>
          <name>Send data</name>
          <description>No bloody clue</description>
        </command>
      </commands>
       <properties>
    <property>
      <name>Debug Level</name>
      <type>LIST</type>
      <readonly>false</readonly>
      <default>2 - Warning</default>
      <items>
        <item>0 - Alert</item>
        <item>1 - Error</item>
        <item>2 - Warning</item>
        <item>3 - Info</item>
        <item>4 - Trace</item>
        <item>5 - Debug</item>
    </items>
    </property>
      <property>
      <name>Debug Mode</name>
      <type>LIST</type>
      <readonly>false</readonly>
      <default>Off</default>
      <items>
        <item>Off</item>
        <item>Print</item>
        <item>Log</item>
        <item>Print and Log</item>
      </items>
    </property>      
    <property>
        <name>ThermostatID</name>
          <type>RANGED_INTEGER</type>
          <minimum>0</minimum>
          <maximum>32</maximum>
          <default>5</default>
      </property>
      <property>
        <name>State</name>
          <type>LIST</type>
          <items>
            <item>On</item>
            <item>SwitchOn</item>
            <item>Off</item>
            <item>SwitchOff</item>
          </items>
        <default>No</default>
        <readonly>false</readonly>
      </property>
  </properties>      
  
   </config>
</devicedata>
